<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.turtlebone.core.repository.TaskUserRepository" >
  <resultMap id="BaseResultMap" type="com.turtlebone.core.entity.TaskUser" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="taskid" property="taskid" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="assignDatetime" property="assigndatetime" jdbcType="VARCHAR" />
    <result column="deadline" property="deadline" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
  </resultMap>

 <sql id="Base_Column_List" >
   `id`,
   `taskid`,
   `username`,
   `assignDatetime`,
   `deadline`,
   `status`
 </sql>
  
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from task_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from task_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  
  <insert id="insert" parameterType="com.turtlebone.core.entity.TaskUser" >
    insert into task_user ( 
     `id`,
     `taskid`,
     `username`,
     `assignDatetime`,
     `deadline`,
     `status`
    )
    values (
     #{id,jdbcType=INTEGER},
     #{taskid,jdbcType=INTEGER},
     #{username,jdbcType=VARCHAR},
     #{assigndatetime,jdbcType=VARCHAR},
     #{deadline,jdbcType=VARCHAR},
     #{status,jdbcType=INTEGER}
 )
  </insert>
  
  
  
  <insert id="insertSelective" parameterType="com.turtlebone.core.entity.TaskUser" >
    insert into task_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        `id`,
      </if>
      <if test="taskid != null" >
        `taskid`,
      </if>
      <if test="username != null" >
        `username`,
      </if>
      <if test="assigndatetime != null" >
        `assignDatetime`,
      </if>
      <if test="deadline != null" >
        `deadline`,
      </if>
      <if test="status != null" >
        `status`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="taskid != null" >
        #{taskid,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="assigndatetime != null" >
        #{assigndatetime,jdbcType=VARCHAR},
      </if>
      <if test="deadline != null" >
        #{deadline,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  
  <update id="updateByPrimaryKeySelective" parameterType="com.turtlebone.core.entity.TaskUser" >
    update task_user
	  <set>
       <if test="taskid != null" >
        `taskid`= #{taskid,jdbcType=INTEGER},
       </if>
       <if test="username != null" >
        `username`= #{username,jdbcType=VARCHAR},
       </if>
       <if test="assigndatetime != null" >
        `assignDatetime`= #{assigndatetime,jdbcType=VARCHAR},
       </if>
       <if test="deadline != null" >
        `deadline`= #{deadline,jdbcType=VARCHAR},
       </if>
       <if test="status != null" >
        `status`= #{status,jdbcType=INTEGER},
       </if>
          </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <update id="updateByPrimaryKey" parameterType="com.turtlebone.core.entity.TaskUser" >
    update task_user
    set 
       `taskid` = #{taskid,jdbcType=INTEGER},
       `username` = #{username,jdbcType=VARCHAR},
       `assignDatetime` = #{assigndatetime,jdbcType=VARCHAR},
       `deadline` = #{deadline,jdbcType=VARCHAR},
       `status` = #{status,jdbcType=INTEGER}
     where id = #{id,jdbcType=INTEGER}
  </update>
  

  
  <select id="selectCount" resultType="java.lang.Integer" parameterType="com.turtlebone.core.entity.TaskUser" >
    select count(*) from task_user
    <where >
            <if test="id != null" >
        and `id` = #{id,jdbcType=INTEGER}
      </if>
            <if test="taskid != null" >
        and `taskid` = #{taskid,jdbcType=INTEGER}
      </if>
            <if test="username != null" >
        and `username` = #{username,jdbcType=VARCHAR}
      </if>
            <if test="assigndatetime != null" >
        and `assignDatetime` = #{assigndatetime,jdbcType=VARCHAR}
      </if>
            <if test="deadline != null" >
        and `deadline` = #{deadline,jdbcType=VARCHAR}
      </if>
            <if test="status != null" >
        and `status` = #{status,jdbcType=INTEGER}
      </if>
          </where>
  </select>

    <select id="selectPage" resultMap="BaseResultMap" >
    select 
    <include refid="Base_Column_List" />
    from task_user where 1 = 1 
        <if test="taskUser.id != null" >
      and `id` = #{taskUser.id,jdbcType=INTEGER}
    </if>
        <if test="taskUser.taskid != null" >
      and `taskid` = #{taskUser.taskid,jdbcType=INTEGER}
    </if>
        <if test="taskUser.username != null" >
      and `username` = #{taskUser.username,jdbcType=VARCHAR}
    </if>
        <if test="taskUser.assigndatetime != null" >
      and `assignDatetime` = #{taskUser.assigndatetime,jdbcType=VARCHAR}
    </if>
        <if test="taskUser.deadline != null" >
      and `deadline` = #{taskUser.deadline,jdbcType=VARCHAR}
    </if>
        <if test="taskUser.status != null" >
      and `status` = #{taskUser.status,jdbcType=INTEGER}
    </if>
        <if test="pageable.sort != null" >
      order by 
      <foreach collection="pageable.sort" item="order" separator="," >
        <if test="
   order.property == 'id' 
   || order.property == 'taskid'
   || order.property == 'username'
   || order.property == 'assignDatetime'
   || order.property == 'deadline'
   || order.property == 'status'
        " >
        		${order.property} ${order.direction}
        </if>
      </foreach>
    </if>
    <if test="pageable.offset >= 0 and pageable.pageSize > 0" >
      limit ${pageable.offset}, ${pageable.pageSize}
    </if>
  </select>
 </mapper>
  

  
	